#pragma once

#include <cstdint>

const uint8_t FONT_SET[80] = {
    0xF0, 0x90, 0x90, 0x90, 0xF0, 0x20, 0x60, 0x20, 0x20, 0x70, 0xF0, 0x10,
    0xF0, 0x80, 0xF0, 0xF0, 0x10, 0xF0, 0x10, 0xF0, 0x90, 0x90, 0xF0, 0x10,
    0x10, 0xF0, 0x80, 0xF0, 0x10, 0xF0, 0xF0, 0x80, 0xF0, 0x90, 0xF0, 0xF0,
    0x10, 0x20, 0x40, 0x40, 0xF0, 0x90, 0xF0, 0x90, 0xF0, 0xF0, 0x90, 0xF0,
    0x10, 0xF0, 0xF0, 0x90, 0xF0, 0x90, 0x90, 0xE0, 0x90, 0xE0, 0x90, 0xE0,
    0xF0, 0x80, 0x80, 0x80, 0xF0, 0xE0, 0x90, 0x90, 0x90, 0xE0, 0xF0, 0x80,
    0xF0, 0x80, 0xF0, 0xF0, 0x80, 0xF0, 0x80, 0x80,
};

constexpr uint16_t MEMEORY_SIZE = 4096;
constexpr uint8_t STACK_SIZE = 16;
constexpr uint8_t REGISTERS = 16;
constexpr uint8_t KEYS = 16;
constexpr uint8_t FRAMERBUFFER_ROWS = 32;
constexpr uint8_t FRAMERBUFFER_COLS = 64;

class Chip8 {
  uint8_t stack_ptr;
  uint8_t delay_timer;
  uint8_t sound_timer;
  uint16_t opcode;
  uint16_t program_counter;
  uint16_t index;
  uint8_t registers[REGISTERS];
  uint8_t memory[MEMEORY_SIZE];
  uint16_t stack[STACK_SIZE];
  uint8_t framebuffer[FRAMERBUFFER_ROWS][FRAMERBUFFER_COLS];
  uint8_t keys[KEYS];

  void advance_program_counter();

public:
  Chip8();
  void cycle();
};
